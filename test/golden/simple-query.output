queries.cabal

cabal-version: 3.0
name: queries
version: 0.1.0.0
library
  build-depends:
    base,
    postgresql-simple,
    text,
    vector,
  exposed-modules:
    Queries
    Queries.Internal
    Queries.ListUsers


Queries.hs

module Queries
  ( module Queries.Internal,
    module Queries
  )
where

import qualified Queries.Internal
import qualified Queries.ListUsers as Queries


Queries/Internal.hs

{-# LANGUAGE DataKinds #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE TypeFamilies #-}
module Queries.Internal (
    Query(..),
    Params,
    Result,

    Connection,
    ToRow,
    FromRow,

    exec,
    queryOne,
    queryMany
  ) where

import Data.Vector (Vector)
import Database.PostgreSQL.Simple (Connection, FromRow, ToRow)
import qualified Database.PostgreSQL.Simple
import qualified Database.PostgreSQL.Simple.Vector
import GHC.TypeLits (Symbol)

newtype Query (name :: Symbol) (command :: Symbol)
  = Query Database.PostgreSQL.Simple.Query

data family Params (name :: Symbol)

data family Result (name :: Symbol)

exec :: Connection -> Query name ":exec" -> Params name -> IO ()
exec = undefined

queryOne ::
  (ToRow (Params name), FromRow (Result name)) =>
  Connection ->
  Query name ":one" ->
  Params name ->
  IO (Maybe (Result name))
queryOne connection (Query sql) params = do
  result <- Database.PostgreSQL.Simple.query connection sql params
  case result of
    [] -> pure Nothing
    x : _ -> pure (Just x)

queryMany ::
  (ToRow (Params name), FromRow (Result name)) =>
  Connection ->
  Query name ":many" ->
  Params name ->
  IO (Vector (Result name))
queryMany connection (Query sql) =
  Database.PostgreSQL.Simple.Vector.query connection sql


Queries/ListUsers.hs

{- This file was auto-generated from query/users.sql by sqlc-hs. -}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeFamilies #-}

module Queries.ListUsers where

import Queries.Internal (Query(..), Params, Result, ToRow, FromRow)
import GHC.Generics (Generic)

import qualified Data.Int
import qualified Data.Text

query_ListUsers :: Query "ListUsers" "SELECT"
query_ListUsers = Query "SELECT * FROM users;"

data instance Params "ListUsers" = Params_ListUsers
  {
  }
  deriving stock (Generic)
  deriving anyclass (ToRow)

data instance Result "ListUsers" = Result_ListUsers
  {
    id :: !Data.Int.Int32,
    name :: !Data.Text.Text
  }
  deriving stock (Generic)
  deriving anyclass (FromRow)


